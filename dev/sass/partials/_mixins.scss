/// Slightly lighten a color
/// @access public
/// @param {Color} $color - color to tint
/// @param {Number} $percentage - percentage of `$color` in returned color
/// @return {Color}
@function tint($color, $percentage) {
  @return mix(white, $color, $percentage);
}

/// Slightly darken a color
/// @access public
/// @param {Color} $color - color to shade
/// @param {Number} $percentage - percentage of `$color` in returned color
/// @return {Color}
@function shade($color, $percentage) {
  @return mix(black, $color, $percentage);
}

// ----------------------------------------------------------------------------------------------------------------
// mixins
// ----------------------------------------------------------------------------------------------------------------

/* ADDS A BROWSER PREFIX TO THE PROPERTY */
@mixin css3-prefix($property, $value) {
  -webkit-#{$property}: #{$value};
  -khtml-#{$property}: #{$value};
  -moz-#{$property}: #{$value};
  -ms-#{$property}: #{$value};
  -o-#{$property}: #{$value};
  #{$property}: #{$value};
}

/* TRANSFORM  */
@mixin transform($params) {
  @include css3-prefix('transform', $params);
}

/* TRANSITION */
@mixin transition($properties...) {

  @if length($properties) >= 1 {
    @include css3-prefix('transition', $properties);
  }

  @else {
    @include css3-prefix('transition', $what: all, $length: 1s, $easing: ease-in-out);
  }
}

@mixin border-box {
  -moz-box-sizing: border-box;
  -webkit-box-sizing: border-box;
  box-sizing: border-box;
}

// ----------------------------------------------------------------------------------------------------------------
// breakpoint mixins
// ----------------------------------------------------------------------------------------------------------------

@mixin respond-to($media) {
  @if $media == full-width {
    @media screen and (min-width: 1200px) {
      @content;
    }
  }
  @if $media == tablet-wide {
    @media (min-width: 768px) and (max-width: 979px) {
      @content;
    }
  }
  @if $media == tablet-portrait {
    @media (max-width: 767px) {
      @content;
    }
  }
  @if $media == mobile {
    @media (max-width: 567px) {
      @content;
    }
  }
}

@mixin placeholder($color) {
  input::-webkit-input-placeholder {
    color: $color !important;
    opacity: 1;
  }
  input::-moz-placeholder {
    color: $color !important;
    opacity: 1;
  }
  input:-ms-input-placeholder {
    color: $color !important;
    opacity: 1;
  }
  textarea::-webkit-input-placeholder {
    color: $color !important;
    opacity: 1;
  }
  textarea::-moz-placeholder {
    color: $color !important;
    opacity: 1;
  }
  textarea:-ms-input-placeholder {
    color: $color !important;
    opacity: 1;
  }
}

@mixin text-size($size, $standard, $tablet, $mobile, $line-height) {
  font-size: $size - $standard;
  line-height: $line-height - $standard;
  @include respond-to(full-width) {
    font-size: $size;
    line-height: $line-height;
  }

  @include respond-to(tablet-portrait) {
    font-size: $size - $tablet;
    line-height: $line-height - $tablet;
  }

  @include respond-to(mobile) {
    font-size: $size - $mobile;
    line-height: $line-height - $mobile;
  }
}

@mixin line-height($line-height, $standard, $tablet, $mobile) {
  line-height: $line-height - $standard;
  @include respond-to(full-width) {
    line-height: $line-height;
  }

  @include respond-to(tablet-portrait) {
    line-height: $line-height - $tablet;
  }

  @include respond-to(mobile) {
    line-height: $line-height - $mobile;
  }
}